{"ast":null,"code":"var _jsxFileName = \"/Users/matheusrech/Documents/gemini-voice-reading-assistant/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport VideoPreview from './components/VideoPreview';\nimport ChatBox from './components/ChatBox';\nimport MicrophoneControl from './components/MicrophoneControl';\nimport AudioRecorder from './components/AudioRecorder';\nimport webSocketService from './services/WebSocketService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mode, setMode] = useState('camera'); // 'camera', 'screen', or 'none'\n  const [messages, setMessages] = useState([]);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [audioContext, setAudioContext] = useState(null);\n  const audioQueueRef = useRef([]);\n  const isPlayingRef = useRef(false);\n\n  // Initialize web socket and audio context\n  useEffect(() => {\n    // Set up WebSocket event handlers\n    webSocketService.setMessageHandler(handleReceiveMessage);\n    webSocketService.setStatusChangeHandler(setIsConnected);\n\n    // Connect to WebSocket server\n    webSocketService.connect();\n\n    // Initialize AudioContext\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    setAudioContext(audioCtx);\n\n    // Cleanup function\n    return () => {\n      webSocketService.disconnect();\n    };\n  }, []);\n\n  // Handle mode changes\n  useEffect(() => {\n    // Notify server of mode change\n    if (isConnected) {\n      webSocketService.sendMode(mode);\n    }\n  }, [mode, isConnected]);\n\n  // Handle received messages\n  const handleReceiveMessage = data => {\n    if (data.type === 'text') {\n      setMessages(prev => [...prev, {\n        sender: 'gemini',\n        text: data.content\n      }]);\n    } else if (data.type === 'audio') {\n      // Process audio data\n      playAudio(data.content);\n    } else if (data.type === 'error') {\n      console.error('Error from server:', data.content);\n      // Optionally display error to user\n      setMessages(prev => [...prev, {\n        sender: 'system',\n        text: `Error: ${data.content}`\n      }]);\n    }\n  };\n\n  // Send a text message\n  const handleSendMessage = text => {\n    // Add message to local state\n    setMessages(prev => [...prev, {\n      sender: 'user',\n      text: text\n    }]);\n\n    // Send to server\n    webSocketService.sendText(text);\n  };\n\n  // Toggle microphone recording\n  const handleToggleRecording = () => {\n    setIsRecording(prev => !prev);\n  };\n\n  // Play audio data received from the server\n  const playAudio = audioData => {\n    if (!audioContext) return;\n    try {\n      // Decode the base64 audio data\n      const binaryString = atob(audioData);\n      const bytes = new Uint8Array(binaryString.length);\n      for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n      }\n\n      // Add to queue\n      audioQueueRef.current.push(bytes.buffer);\n\n      // If not already playing, start\n      if (!isPlayingRef.current) {\n        playNextInQueue();\n      }\n    } catch (error) {\n      console.error('Error processing audio data:', error);\n    }\n  };\n\n  // Play the next audio chunk in the queue\n  const playNextInQueue = () => {\n    if (!audioContext || audioQueueRef.current.length === 0) {\n      isPlayingRef.current = false;\n      return;\n    }\n    isPlayingRef.current = true;\n    const nextAudio = audioQueueRef.current.shift();\n\n    // Decode and play audio\n    audioContext.decodeAudioData(nextAudio).then(buffer => {\n      const source = audioContext.createBufferSource();\n      source.buffer = buffer;\n      source.connect(audioContext.destination);\n      source.onended = playNextInQueue;\n      source.start();\n    }).catch(err => {\n      console.error('Error decoding audio:', err);\n      playNextInQueue(); // Try next chunk\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"app-title\",\n        children: \"Gemini Voice Reading Assistant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"app-subtitle\",\n        children: \"Ask questions or show documents to Gemini AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mode-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `mode-button ${mode === 'camera' ? 'active' : ''}`,\n        onClick: () => setMode('camera'),\n        children: \"Camera Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `mode-button ${mode === 'screen' ? 'active' : ''}`,\n        onClick: () => setMode('screen'),\n        children: \"Screen Share\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `mode-button ${mode === 'none' ? 'active' : ''}`,\n        onClick: () => setMode('none'),\n        children: \"Audio Only\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-chat-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          children: /*#__PURE__*/_jsxDEV(VideoPreview, {\n            mode: mode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-container\",\n          children: /*#__PURE__*/_jsxDEV(ChatBox, {\n            messages: messages,\n            onSend: handleSendMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-panel\",\n        children: [/*#__PURE__*/_jsxDEV(MicrophoneControl, {\n          isRecording: isRecording,\n          onToggleRecording: handleToggleRecording\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: isConnected ? '#34A853' : '#EA4335',\n            margin: '10px'\n          },\n          children: isConnected ? 'Connected' : 'Disconnected'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AudioRecorder, {\n      isRecording: isRecording,\n      onStatusChange: status => setIsRecording(status)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"VpW2W/ziA34OYLPJLB3voWtf03s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","VideoPreview","ChatBox","MicrophoneControl","AudioRecorder","webSocketService","jsxDEV","_jsxDEV","App","_s","mode","setMode","messages","setMessages","isRecording","setIsRecording","isConnected","setIsConnected","audioContext","setAudioContext","audioQueueRef","isPlayingRef","setMessageHandler","handleReceiveMessage","setStatusChangeHandler","connect","audioCtx","window","AudioContext","webkitAudioContext","disconnect","sendMode","data","type","prev","sender","text","content","playAudio","console","error","handleSendMessage","sendText","handleToggleRecording","audioData","binaryString","atob","bytes","Uint8Array","length","i","charCodeAt","current","push","buffer","playNextInQueue","nextAudio","shift","decodeAudioData","then","source","createBufferSource","destination","onended","start","catch","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSend","onToggleRecording","style","color","margin","onStatusChange","status","_c","$RefreshReg$"],"sources":["/Users/matheusrech/Documents/gemini-voice-reading-assistant/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport VideoPreview from './components/VideoPreview';\nimport ChatBox from './components/ChatBox';\nimport MicrophoneControl from './components/MicrophoneControl';\nimport AudioRecorder from './components/AudioRecorder';\nimport webSocketService from './services/WebSocketService';\n\nfunction App() {\n  const [mode, setMode] = useState('camera'); // 'camera', 'screen', or 'none'\n  const [messages, setMessages] = useState([]);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [audioContext, setAudioContext] = useState(null);\n  const audioQueueRef = useRef([]);\n  const isPlayingRef = useRef(false);\n\n  // Initialize web socket and audio context\n  useEffect(() => {\n    // Set up WebSocket event handlers\n    webSocketService.setMessageHandler(handleReceiveMessage);\n    webSocketService.setStatusChangeHandler(setIsConnected);\n    \n    // Connect to WebSocket server\n    webSocketService.connect();\n    \n    // Initialize AudioContext\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    setAudioContext(audioCtx);\n    \n    // Cleanup function\n    return () => {\n      webSocketService.disconnect();\n    };\n  }, []);\n\n  // Handle mode changes\n  useEffect(() => {\n    // Notify server of mode change\n    if (isConnected) {\n      webSocketService.sendMode(mode);\n    }\n  }, [mode, isConnected]);\n\n  // Handle received messages\n  const handleReceiveMessage = (data) => {\n    if (data.type === 'text') {\n      setMessages(prev => [...prev, {\n        sender: 'gemini',\n        text: data.content\n      }]);\n    } else if (data.type === 'audio') {\n      // Process audio data\n      playAudio(data.content);\n    } else if (data.type === 'error') {\n      console.error('Error from server:', data.content);\n      // Optionally display error to user\n      setMessages(prev => [...prev, {\n        sender: 'system',\n        text: `Error: ${data.content}`\n      }]);\n    }\n  };\n\n  // Send a text message\n  const handleSendMessage = (text) => {\n    // Add message to local state\n    setMessages(prev => [...prev, {\n      sender: 'user',\n      text: text\n    }]);\n\n    // Send to server\n    webSocketService.sendText(text);\n  };\n\n  // Toggle microphone recording\n  const handleToggleRecording = () => {\n    setIsRecording(prev => !prev);\n  };\n\n  // Play audio data received from the server\n  const playAudio = (audioData) => {\n    if (!audioContext) return;\n    \n    try {\n      // Decode the base64 audio data\n      const binaryString = atob(audioData);\n      const bytes = new Uint8Array(binaryString.length);\n      for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n      }\n      \n      // Add to queue\n      audioQueueRef.current.push(bytes.buffer);\n      \n      // If not already playing, start\n      if (!isPlayingRef.current) {\n        playNextInQueue();\n      }\n    } catch (error) {\n      console.error('Error processing audio data:', error);\n    }\n  };\n\n  // Play the next audio chunk in the queue\n  const playNextInQueue = () => {\n    if (!audioContext || audioQueueRef.current.length === 0) {\n      isPlayingRef.current = false;\n      return;\n    }\n\n    isPlayingRef.current = true;\n    const nextAudio = audioQueueRef.current.shift();\n\n    // Decode and play audio\n    audioContext.decodeAudioData(nextAudio)\n      .then(buffer => {\n        const source = audioContext.createBufferSource();\n        source.buffer = buffer;\n        source.connect(audioContext.destination);\n        source.onended = playNextInQueue;\n        source.start();\n      })\n      .catch(err => {\n        console.error('Error decoding audio:', err);\n        playNextInQueue(); // Try next chunk\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"app-header\">\n        <h1 className=\"app-title\">Gemini Voice Reading Assistant</h1>\n        <h3 className=\"app-subtitle\">Ask questions or show documents to Gemini AI</h3>\n      </header>\n\n      <div className=\"mode-selector\">\n        <button \n          className={`mode-button ${mode === 'camera' ? 'active' : ''}`}\n          onClick={() => setMode('camera')}\n        >\n          Camera Mode\n        </button>\n        <button \n          className={`mode-button ${mode === 'screen' ? 'active' : ''}`}\n          onClick={() => setMode('screen')}\n        >\n          Screen Share\n        </button>\n        <button \n          className={`mode-button ${mode === 'none' ? 'active' : ''}`}\n          onClick={() => setMode('none')}\n        >\n          Audio Only\n        </button>\n      </div>\n\n      <div className=\"main-content\">\n        <div className=\"video-chat-container\">\n          <div className=\"video-container\">\n            <VideoPreview mode={mode} />\n          </div>\n          \n          <div className=\"chat-container\">\n            <ChatBox \n              messages={messages} \n              onSend={handleSendMessage} \n            />\n          </div>\n        </div>\n\n        <div className=\"control-panel\">\n          <MicrophoneControl \n            isRecording={isRecording}\n            onToggleRecording={handleToggleRecording}\n          />\n          <div style={{ color: isConnected ? '#34A853' : '#EA4335', margin: '10px' }}>\n            {isConnected ? 'Connected' : 'Disconnected'}\n          </div>\n        </div>\n      </div>\n      \n      {/* Invisible audio recorder component */}\n      <AudioRecorder \n        isRecording={isRecording}\n        onStatusChange={(status) => setIsRecording(status)}\n      />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}