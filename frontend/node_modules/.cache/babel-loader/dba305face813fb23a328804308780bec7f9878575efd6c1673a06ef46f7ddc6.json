{"ast":null,"code":"var _jsxFileName = \"/Users/matheusrech/Documents/gemini-voice-reading-assistant/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport VideoPreview from './components/VideoPreview';\nimport ChatBox from './components/ChatBox';\nimport MicrophoneControl from './components/MicrophoneControl';\nimport AudioRecorder from './components/AudioRecorder';\nimport webSocketService from './services/WebSocketService';\n\n// Create a singleton AudioContext instance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet globalAudioContext = null;\nfunction getAudioContext() {\n  if (!globalAudioContext) {\n    // Create the audio context only once\n    try {\n      const AudioContext = window.AudioContext || window.webkitAudioContext;\n      globalAudioContext = new AudioContext();\n    } catch (e) {\n      console.error('Failed to create AudioContext:', e);\n    }\n  }\n  return globalAudioContext;\n}\nfunction App() {\n  _s();\n  const [mode, setMode] = useState('camera'); // 'camera', 'screen', or 'none'\n  const [messages, setMessages] = useState([]);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const audioQueueRef = useRef([]);\n  const isPlayingRef = useRef(false);\n  const audioContextRef = useRef(null);\n\n  // Initialize web socket and audio context\n  useEffect(() => {\n    // Set up WebSocket event handlers\n    webSocketService.setMessageHandler(handleReceiveMessage);\n    webSocketService.setStatusChangeHandler(setIsConnected);\n\n    // Connect to WebSocket server\n    webSocketService.connect();\n\n    // Get singleton AudioContext instance\n    audioContextRef.current = getAudioContext();\n\n    // Cleanup function\n    return () => {\n      webSocketService.disconnect();\n    };\n  }, []);\n\n  // Handle mode changes\n  useEffect(() => {\n    // Notify server of mode change\n    if (isConnected) {\n      webSocketService.sendMode(mode);\n    }\n  }, [mode, isConnected]);\n\n  // Handle received messages\n  const handleReceiveMessage = data => {\n    if (data.type === 'text') {\n      setMessages(prev => [...prev, {\n        sender: 'gemini',\n        text: data.content\n      }]);\n    } else if (data.type === 'audio') {\n      // Process audio data\n      playAudio(data.content);\n    } else if (data.type === 'error') {\n      console.error('Error from server:', data.content);\n      // Optionally display error to user\n      setMessages(prev => [...prev, {\n        sender: 'system',\n        text: `Error: ${data.content}`\n      }]);\n    }\n  };\n\n  // Send a text message\n  const handleSendMessage = text => {\n    // Add message to local state\n    setMessages(prev => [...prev, {\n      sender: 'user',\n      text: text\n    }]);\n\n    // Send to server\n    webSocketService.sendText(text);\n  };\n\n  // Toggle microphone recording\n  const handleToggleRecording = () => {\n    setIsRecording(prev => !prev);\n  };\n\n  // Play audio data received from the server\n  const playAudio = audioData => {\n    if (!audioContextRef.current) {\n      console.error('No audio context available');\n      return;\n    }\n    try {\n      console.log('Playing audio data...');\n\n      // Decode the base64 audio data\n      const binaryString = atob(audioData);\n      const bytes = new Uint8Array(binaryString.length);\n      for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n      }\n\n      // Make sure AudioContext is resumed (needed for browsers that suspend it)\n      if (audioContextRef.current.state === 'suspended') {\n        audioContextRef.current.resume();\n      }\n\n      // Add to queue\n      audioQueueRef.current.push(bytes.buffer);\n      console.log('Added audio to queue. Queue length:', audioQueueRef.current.length);\n\n      // If not already playing, start\n      if (!isPlayingRef.current) {\n        console.log('Starting audio playback');\n        playNextInQueue();\n      }\n    } catch (error) {\n      console.error('Error processing audio data:', error);\n    }\n  };\n\n  // Play the next audio chunk in the queue\n  const playNextInQueue = () => {\n    if (!audioContextRef.current || audioQueueRef.current.length === 0) {\n      isPlayingRef.current = false;\n      console.log('Audio queue empty or no audio context');\n      return;\n    }\n    isPlayingRef.current = true;\n    const nextAudio = audioQueueRef.current.shift();\n    console.log('Processing next audio chunk');\n    try {\n      // Decode and play audio\n      audioContextRef.current.decodeAudioData(nextAudio).then(buffer => {\n        console.log('Successfully decoded audio buffer');\n\n        // Create audio source\n        const source = audioContextRef.current.createBufferSource();\n        source.buffer = buffer;\n\n        // Create gain node for volume control\n        const gainNode = audioContextRef.current.createGain();\n        gainNode.gain.value = 1.0; // Full volume\n\n        // Connect the nodes: source -> gain -> destination\n        source.connect(gainNode);\n        gainNode.connect(audioContextRef.current.destination);\n\n        // Set up callback for when audio finishes\n        source.onended = () => {\n          console.log('Audio chunk finished playing');\n          playNextInQueue();\n        };\n\n        // Start playing\n        source.start();\n        console.log('Started playing audio chunk');\n      }).catch(err => {\n        console.error('Error decoding audio:', err);\n        // Try next chunk if there was an error\n        playNextInQueue();\n      });\n    } catch (err) {\n      console.error('Critical error in audio playback:', err);\n      isPlayingRef.current = false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"app-title\",\n        children: \"Gemini Voice Reading Assistant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"app-subtitle\",\n        children: \"Ask questions or show documents to Gemini AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mode-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `mode-button ${mode === 'camera' ? 'active' : ''}`,\n        onClick: () => setMode('camera'),\n        children: \"Camera Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `mode-button ${mode === 'screen' ? 'active' : ''}`,\n        onClick: () => setMode('screen'),\n        children: \"Screen Share\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `mode-button ${mode === 'none' ? 'active' : ''}`,\n        onClick: () => setMode('none'),\n        children: \"Audio Only\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-chat-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          children: /*#__PURE__*/_jsxDEV(VideoPreview, {\n            mode: mode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-container\",\n          children: /*#__PURE__*/_jsxDEV(ChatBox, {\n            messages: messages,\n            onSend: handleSendMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-panel\",\n        children: [/*#__PURE__*/_jsxDEV(MicrophoneControl, {\n          isRecording: isRecording,\n          onToggleRecording: handleToggleRecording\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: isConnected ? '#34A853' : '#EA4335',\n            margin: '10px'\n          },\n          children: isConnected ? 'Connected' : 'Disconnected'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AudioRecorder, {\n      isRecording: isRecording,\n      onStatusChange: status => setIsRecording(status),\n      audioContext: audioContextRef.current\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"9zg8bvNgRF/EYDnp0GuIS95V0KY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","VideoPreview","ChatBox","MicrophoneControl","AudioRecorder","webSocketService","jsxDEV","_jsxDEV","globalAudioContext","getAudioContext","AudioContext","window","webkitAudioContext","e","console","error","App","_s","mode","setMode","messages","setMessages","isRecording","setIsRecording","isConnected","setIsConnected","audioQueueRef","isPlayingRef","audioContextRef","setMessageHandler","handleReceiveMessage","setStatusChangeHandler","connect","current","disconnect","sendMode","data","type","prev","sender","text","content","playAudio","handleSendMessage","sendText","handleToggleRecording","audioData","log","binaryString","atob","bytes","Uint8Array","length","i","charCodeAt","state","resume","push","buffer","playNextInQueue","nextAudio","shift","decodeAudioData","then","source","createBufferSource","gainNode","createGain","gain","value","destination","onended","start","catch","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSend","onToggleRecording","style","color","margin","onStatusChange","status","audioContext","_c","$RefreshReg$"],"sources":["/Users/matheusrech/Documents/gemini-voice-reading-assistant/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport VideoPreview from './components/VideoPreview';\nimport ChatBox from './components/ChatBox';\nimport MicrophoneControl from './components/MicrophoneControl';\nimport AudioRecorder from './components/AudioRecorder';\nimport webSocketService from './services/WebSocketService';\n\n// Create a singleton AudioContext instance\nlet globalAudioContext = null;\n\nfunction getAudioContext() {\n  if (!globalAudioContext) {\n    // Create the audio context only once\n    try {\n      const AudioContext = window.AudioContext || window.webkitAudioContext;\n      globalAudioContext = new AudioContext();\n    } catch (e) {\n      console.error('Failed to create AudioContext:', e);\n    }\n  }\n  return globalAudioContext;\n}\n\nfunction App() {\n  const [mode, setMode] = useState('camera'); // 'camera', 'screen', or 'none'\n  const [messages, setMessages] = useState([]);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const audioQueueRef = useRef([]);\n  const isPlayingRef = useRef(false);\n  const audioContextRef = useRef(null);\n\n  // Initialize web socket and audio context\n  useEffect(() => {\n    // Set up WebSocket event handlers\n    webSocketService.setMessageHandler(handleReceiveMessage);\n    webSocketService.setStatusChangeHandler(setIsConnected);\n    \n    // Connect to WebSocket server\n    webSocketService.connect();\n    \n    // Get singleton AudioContext instance\n    audioContextRef.current = getAudioContext();\n    \n    // Cleanup function\n    return () => {\n      webSocketService.disconnect();\n    };\n  }, []);\n\n  // Handle mode changes\n  useEffect(() => {\n    // Notify server of mode change\n    if (isConnected) {\n      webSocketService.sendMode(mode);\n    }\n  }, [mode, isConnected]);\n\n  // Handle received messages\n  const handleReceiveMessage = (data) => {\n    if (data.type === 'text') {\n      setMessages(prev => [...prev, {\n        sender: 'gemini',\n        text: data.content\n      }]);\n    } else if (data.type === 'audio') {\n      // Process audio data\n      playAudio(data.content);\n    } else if (data.type === 'error') {\n      console.error('Error from server:', data.content);\n      // Optionally display error to user\n      setMessages(prev => [...prev, {\n        sender: 'system',\n        text: `Error: ${data.content}`\n      }]);\n    }\n  };\n\n  // Send a text message\n  const handleSendMessage = (text) => {\n    // Add message to local state\n    setMessages(prev => [...prev, {\n      sender: 'user',\n      text: text\n    }]);\n\n    // Send to server\n    webSocketService.sendText(text);\n  };\n\n  // Toggle microphone recording\n  const handleToggleRecording = () => {\n    setIsRecording(prev => !prev);\n  };\n\n  // Play audio data received from the server\n  const playAudio = (audioData) => {\n    if (!audioContextRef.current) {\n      console.error('No audio context available');\n      return;\n    }\n    \n    try {\n      console.log('Playing audio data...');\n      \n      // Decode the base64 audio data\n      const binaryString = atob(audioData);\n      const bytes = new Uint8Array(binaryString.length);\n      for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n      }\n      \n      // Make sure AudioContext is resumed (needed for browsers that suspend it)\n      if (audioContextRef.current.state === 'suspended') {\n        audioContextRef.current.resume();\n      }\n      \n      // Add to queue\n      audioQueueRef.current.push(bytes.buffer);\n      console.log('Added audio to queue. Queue length:', audioQueueRef.current.length);\n      \n      // If not already playing, start\n      if (!isPlayingRef.current) {\n        console.log('Starting audio playback');\n        playNextInQueue();\n      }\n    } catch (error) {\n      console.error('Error processing audio data:', error);\n    }\n  };\n\n  // Play the next audio chunk in the queue\n  const playNextInQueue = () => {\n    if (!audioContextRef.current || audioQueueRef.current.length === 0) {\n      isPlayingRef.current = false;\n      console.log('Audio queue empty or no audio context');\n      return;\n    }\n\n    isPlayingRef.current = true;\n    const nextAudio = audioQueueRef.current.shift();\n    console.log('Processing next audio chunk');\n\n    try {\n      // Decode and play audio\n      audioContextRef.current.decodeAudioData(nextAudio)\n        .then(buffer => {\n          console.log('Successfully decoded audio buffer');\n          \n          // Create audio source\n          const source = audioContextRef.current.createBufferSource();\n          source.buffer = buffer;\n          \n          // Create gain node for volume control\n          const gainNode = audioContextRef.current.createGain();\n          gainNode.gain.value = 1.0; // Full volume\n          \n          // Connect the nodes: source -> gain -> destination\n          source.connect(gainNode);\n          gainNode.connect(audioContextRef.current.destination);\n          \n          // Set up callback for when audio finishes\n          source.onended = () => {\n            console.log('Audio chunk finished playing');\n            playNextInQueue();\n          };\n          \n          // Start playing\n          source.start();\n          console.log('Started playing audio chunk');\n        })\n        .catch(err => {\n          console.error('Error decoding audio:', err);\n          // Try next chunk if there was an error\n          playNextInQueue();\n        });\n    } catch (err) {\n      console.error('Critical error in audio playback:', err);\n      isPlayingRef.current = false;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"app-header\">\n        <h1 className=\"app-title\">Gemini Voice Reading Assistant</h1>\n        <h3 className=\"app-subtitle\">Ask questions or show documents to Gemini AI</h3>\n      </header>\n\n      <div className=\"mode-selector\">\n        <button \n          className={`mode-button ${mode === 'camera' ? 'active' : ''}`}\n          onClick={() => setMode('camera')}\n        >\n          Camera Mode\n        </button>\n        <button \n          className={`mode-button ${mode === 'screen' ? 'active' : ''}`}\n          onClick={() => setMode('screen')}\n        >\n          Screen Share\n        </button>\n        <button \n          className={`mode-button ${mode === 'none' ? 'active' : ''}`}\n          onClick={() => setMode('none')}\n        >\n          Audio Only\n        </button>\n      </div>\n\n      <div className=\"main-content\">\n        <div className=\"video-chat-container\">\n          <div className=\"video-container\">\n            <VideoPreview mode={mode} />\n          </div>\n          \n          <div className=\"chat-container\">\n            <ChatBox \n              messages={messages} \n              onSend={handleSendMessage} \n            />\n          </div>\n        </div>\n\n        <div className=\"control-panel\">\n          <MicrophoneControl \n            isRecording={isRecording}\n            onToggleRecording={handleToggleRecording}\n          />\n          <div style={{ color: isConnected ? '#34A853' : '#EA4335', margin: '10px' }}>\n            {isConnected ? 'Connected' : 'Disconnected'}\n          </div>\n        </div>\n      </div>\n      \n      {/* Invisible audio recorder component */}\n      <AudioRecorder \n        isRecording={isRecording}\n        onStatusChange={(status) => setIsRecording(status)}\n        audioContext={audioContextRef.current}\n      />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}